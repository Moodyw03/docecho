# fly.toml app configuration file generated for docecho on 2025-04-22T09:21:47+01:00
#
# See https://fly.io/docs/reference/configuration/ for information about how to use this file.
#

app = "docecho"
primary_region = "lhr"

# Define processes for web server and celery worker
[processes]
  # Use gunicorn settings from env vars if defined, otherwise defaults - Using hardcoded defaults now
  web = "gunicorn --bind :8080 --workers 2 --threads 4 --timeout 120 --worker-class gthread wsgi:app"
  # Run celery worker, pointing to the celery instance in celery_worker.py
  worker = "celery -A celery_worker.celery worker --loglevel=INFO -c 2" # -c specifies concurrency (2 workers)

[http_service]
  internal_port = 8080
  force_https = true
  auto_stop_machines = true # Can disable for worker if needed
  auto_start_machines = true # Can disable for worker if needed
  min_machines_running = 0
  # Only expose the 'web' process via HTTP
  processes = ["web"]

[env]
  FLASK_ENV = "production"
  PORT = "8080"
  PYTHONUNBUFFERED = "1"
  FLY_APP_NAME = "docecho"
  # Gunicorn settings moved to [processes] command, can be removed or kept for reference
  # GUNICORN_WORKERS = "2"
  # GUNICORN_THREADS = "4"
  # GUNICORN_TIMEOUT = "300"

[build]
  dockerfile = "Dockerfile"

[deploy]
  release_command = "flask db upgrade"

[mounts]
  source = "app_data"
  destination = "/app/data"
  processes = ["app", "worker"] # Mount to both app and worker processes

[[vm]]
  # Use larger VMs now
  size = "shared-cpu-1x"
  memory = "1024mb" # Updated memory
  cpu_kind = "shared"
  # Assign processes to VMs. Can have dedicated VMs for workers later if needed.
  processes = ["web", "worker"]

[[statics]]
  guest_path = "/app/app/static"
  url_prefix = "/static"
